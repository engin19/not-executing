Class 1 -

Cucumber -

Cucumber - cucumber is a tool
Gherkin - gherkin is a language
BDD - BDD is an approach (behavioral driven development)


cucumber is a tool which allows us to write gherkin language that helps us implementing BDD approach in test automation.

whenever we write BDD scenarios, we will write from end user point of view.

Given - pre condition
when - performing actions
Then - expected result
And - supporting tag

every test case in cucumber will be considered as scenario.

why framework - BluePrint ALl the group members who is working on the same project would write the code differently so
it would be really hard to fallow and execute. so Framework would give us the advantage of SOP( Standard of Practice).

whenever we create a framework:
*   Code re-usability  should be at its peak.
*   if i want to add change or take off any part of the framework it shouldn't be disturb the rest of the framework
*   when  our frame work will support more than one type of testing BDD and DDT  it would called HYBRID testing.
*   we need to make sure our framework is machine oriented meaning it should work with with any computer.
*   The lowest lever team member should be able to understand the framework.

Why Cucumber
*   no reporting structure in selenium
*   no proper execution point
*   no proper segregation of screens of the application

where we write the code is SOURCE folder that is why we have src folder .







group id  - org.syntax
artifact id - CucumberBatch18

under src - we have 2 folders
main - developing the application
test - test the application

delete main - we don't need it
 in test - we need 2 things


in test we need 2 things
 technical - java- only code is technical rest is non technical
 non - technical - resources

 Maven-


 the end goal is to test the application
 functional testing - UI

Given user is navigated to HRMS application
When user enters admin username and password
And user clicks on login button
Then user is successfully logged in

User story - search an employee in HRMS
Scenario 1 - search employee by ID
Scenario 2 - search employee by name
----------------------------------0----------------------------------------------
Recap:
Cucumber allows us to write scenarios Gherkin language as a Maven project, We created the framework skeleton.
main-
test here we write code to test the application
    *java: all the technical parts
    *resources: for all the non-technical parts

Feature file - in this we write scenarios
Steps package: to keep all the step definitions.

utils package  is for all utility classes


We need control of the flow of execution
    *   to execute all the test cases.
    *   to execute some of the test cases
    *   to execute one of the test case

-------------------------------------------0---------------------------------------------------------
Class 3
recap
RunnerClass
we need junit to work with cucumber
cucumber options
features-the path of features directory to execute all the TC's in one go
glue- the path of the steps package,runner class will find all the steps defs here
dryRun- if we set it true , it will stop actual Execution and scans all the steps
                            if any step is missing it will give me step deffinition for that step
                            if we set it false  then again execution will start
tags- when we need to execute specific group of test cases or any Specific test cases we use tags
        there is no limitation of using tags in scenarios.
         such as  @regression

if i want to execute scenarios based on at least  2 conditions
OR: if either conditions are true it will execute the TC
AND: both condition must be true to execute the TC

We need config.properties to add all the configuration parameters.

review class 1:
BDD all the stakeholders are involved in the process.(PO,Dev,Tester).
you are writing the scenarios based on how the application should BEHAVE..

-----------------------------------------------0-------------------------------------------------
Class 4
Recap
runnerClass;
to control the execution flow
cucumber options
features-
glue -
dryRun-
tags- as many as you want
plugin- pretty- it prints all the step definitions in the console

commonMethods : we have all the common methods here
    js execution-is used when click does not work, because DOM cannot find the webelement we mentioned earlier.


    hooks- WE will write the pre condition and post conditions here
            hooks class will be always be in steps package
            @Before
            @After

Background: in background we write all the steps in the feature file which is common in all the scenario.
            once the flow is broken we cant write steps after tha tin the background doesnt matter
            how mant steps are common after flow is broken we cant write them in background becasue flow has already broken

background is liomited to one feature file
it means for every feature file background will be different

hoowks vs background
    *hooks vs background
     Hooks are applicable for all the feature files
     Background is applicable for one feature file
     flow of execution first: First hooks will execute, second background and third scenario will execute

DATA DRIVEN TESTING(DDT):
When your one scenario is executing against multiple sets of data our framework is hybrit in nature -it supports BBD and DDT

------------------------------------------0------------------------------------------------------
Class 5
Recap:
WE can pass data from feature file in terms of parameters
"data value ", it will be consider as a parameter.

we can achieve DATA DRIVEN TESTING  using feature file
we using examples table with scenario outline to pass multiple sets of data

hooks based on number of data set
background- based on number of data set
scenario- based on number of data set


Assertions: in cucumber we use Junit assertions.

verification anything that we do without using the application when you check the details on SRS= Software Requirements Specification

validation anything we do with application.When you

two type of validation we use in cucumber

*   true- checks the existence of the element/test/field
*   equals- checks exact value of the element ( validation)

POM- page object model design pattern
as per this design pattern , we have a class for each page available in website
we will keep locators for this page in the respective class
login lage locators will be in login page class and so on
we call these locators as object repositories
first create page class and add object repository
then create the constructor and call page factory
then create the object of the class in page initializer class
then comment out previous web element and call objects with web element
-------------------------------------------------------0-----------------------------------------------------
Class 6
recap
worked with excel reader class - to add multiple employees from excel file
Data Table: to achieve DDT data driven testing we need data table
------------------------------------------------0---------------------------------------------------
Class 7
data table  for data driven testing, we tested it for one step and not whole scenario
how we validate theemployee from web table
target folder  every report what you generate will be available  inside the target folder
reports can in html, json ect.


cucumber maven reporting plugin
in pom.xml file we have added it
we are executing maven test command to execute the script
since there can be multiple reasons of the scrips failure ,
we should re-run the script ,we have to add another to re-run the failed test case(s).

different phases of Maven lifecycle
different phases of maven lifecycle
compile - source code converts into binary code
install - jars will be installed in local repo
deploy - in this phase. jars will go to remote repo
package - code will be packaged into jars and transfer
verify - checks the validity of the code
test - here code will be tested
clean - target folder will be deleted


-------------------------------------------0----------------------------------------------
class 8
recap
examples table- scenario outline
key and value in table with example keyword
keys available in examples table can be used in multiple steps of the scenario

data table -scenario
key and value in table without examples keyword
keys and value in datatable will be available for just one step

reports -html report
we need artifacts
runner class,under plugin-target folder
json report
runner class under plugin - target folder

we use pom.xml file as an execution file
it is our build management tool file
maven is our build management tool


different phases of maven lifecycle
compile - source code converts into binary code
install - jars will be installed in local repo
deploy - in this phase. jars will go to remote repo
package - code will be packaged into jars and transfer
verify - checks the validity of the code
test - here code will be tested
clean - target folder will be deleted


Screenshot
array of byte
get time stamp method ,it returns time in desired pattern
Scenario class holds the complete information about execution


log4j
log file:---details
execution logs -execution details/records
console log-this is for local execution - log file

            instead of reading the details of execution in console, you create separate file
            as log file
----------------------------------------------0------------------------------------------------------

Dependencies:
In Maven, dependencies are external Java libraries or
other modules that your project relies on to compile, test, and run.
These dependencies are specified in the pom.xml file of your Maven project.
The pom.xml file contains a <dependencies> section where you declare the dependencies your project needs.


The Dependencies for out framework:

        ** Selenium:   Selenium provides support for the automation of web browsers.
                        It provides extensions to emulate user interaction with browsers,
                        a distribution server for scaling browser allocation,
                        and the infrastructure for implementations of the W3C WebDriver specification
             <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
                    <dependency>
                        <groupId>org.seleniumhq.selenium</groupId>
                        <artifactId>selenium-java</artifactId>
                        <version>4.11.0</version>
        **Cucumber JVM:Java
           <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
           <dependency>
               <groupId>io.cucumber</groupId>
               <artifactId>cucumber-java</artifactId>
               <version>7.14.0</version>
           </dependency>
        **Cucumber JVM: JUnit 4
             <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-junit -->
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-junit</artifactId>
                <version>7.14.0</version>
                <scope>test</scope>
            </dependency>

        **Apache POI Common:  Java API To Access Microsoft Format Files


            <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>4.1.2</version>
            </dependency>

        **Apache POI API Based On OPC and OOXML Schemas:   Java API To Access Microsoft Format Files


             <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
             <dependency>
                 <groupId>org.apache.poi</groupId>
                 <artifactId>poi-ooxml</artifactId>
                 <version>5.2.2</version>
             </dependency>

        **Commons IO:The Apache Commons IO library contains utility classes, stream implementations, file filters,
                     file comparators, endian transformation classes.


        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.11.0</version>
            </dependency>

        **Log4j:Legacy version of Log4J logging framework. Log4J 1 has reached its end of life and is no
                longer officially supported. It is recommended to migrate to Log4J 2.

        <!-- https://mvnrepository.com/artifact/log4j/log4j -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>




